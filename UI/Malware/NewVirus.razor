<style>
    #NewVirus .box {
        border: 1px dashed;
        border-color: var(--ba-border-color-light);
        display: inline-block;
        padding: 1em;
        transition: all ease-in-out .5s;
    }

        #NewVirus .box.selected {
            box-shadow: 0 0 8px #9ecaed;
        }

        #NewVirus input {
            background-color: transparent;
            color: inherit;
        }
</style>

<div id="NewVirus">
    <Carousel Title="Exploit" Items="@carouselExploits()" SelectedItemChanged="@selectedExploitChanged" />
    <br />
    <Carousel Title="Vector" Items="@carouselVectors()" SelectedItemChanged="@selectedVectorChanged" />
    <br />
    Distribution Channels
    <br />
    <br />
    @foreach (ViralDistributor distributor in ViralDistributor.List)
    {
        <div class="box @distributorClass(distributor)">
            @distributor.Name<br />

            @foreach (ViralVector vector in distributor.DistributedVectors)
            {
                <span class=@getDistributedVectorClass(vector)></span>
            }
        </div>
    }
    <br />
    <br />
    <input type="text" @bind-value="@name" class="form-control" />
    <br />
    <button @onclick="@writeVirus" disabled=@disabled class="@writeButtonClass"> Write @writeTime</button>
</div>

@code {

    [Inject]
    IModalService modalService { get; set; }

    private string writeTime
    {
        get
        {
            if (selectedExploit == null || selectedVector == null) return "";

            return Virus.WriteTime(selectedExploit, selectedVector) + "s";
        }
    }

    private bool disabled = false;
    private Exploit selectedExploit;
    private ViralVector selectedVector;
    private string name = "Goodbye World";

    private string writeButtonClass = "purple btn btn-primary mdi mdi-timer";

    private List<GameObjectBase> carouselExploits()
    {
        Console.WriteLine("Re-listing carousel exploits.");
        // return Exploit.List;
        var resultList = new List<GameObjectBase>();
        foreach (Exploit exploit in Exploit.List)
        {
            resultList.Add(exploit);
        }

        return resultList;
    }

    private List<GameObjectBase> carouselVectors()
    {
        var resultList = new List<GameObjectBase>();
        foreach (ViralVector vector in ViralVector.List)
        {
            resultList.Add(vector);
        }

        return resultList;
    }

    private string getDistributedVectorClass(ViralVector vector)
    {
        var isSelectedVector = (selectedVector != null && vector.Name == selectedVector.Name);
        return vector.Icon +
            (isSelectedVector ? "" : " locked");
    }

    private void selectedExploitChanged(GameObjectBase gameObject)
    {
        selectedExploit = (Exploit)gameObject;

        StateHasChanged();
    }

    private void selectedVectorChanged(GameObjectBase gameObject)
    {
        selectedVector = (ViralVector)gameObject;

        // if (selectedVector != null) Console.WriteLine("Selected Vector: " + selectedVector.Name);

        StateHasChanged();
    }

    private string distributorClass(ViralDistributor distributor)
    {
        if (selectedVector == null) return "";
        foreach (ViralVector vector in distributor.DistributedVectors)
        {
            if (vector.Name == selectedVector.Name)
            {
                return "selected";
            }
        }

        return "";
    }

    private void writeVirus()
    {
        new Virus(name, selectedExploit, selectedVector, 
            Virus.WriteTime(selectedExploit, selectedVector));

        modalService.Close(ModalResult.Cancel());
    }
}
