<style>
    #NewVirus .box {
        border: 1px dashed;
        border-color: var(--ba-border-color-light);
        display: inline-block;
        padding: 1em;
        transition: all ease-in-out .5s;
    }

        #NewVirus .box.selected {
            box-shadow: 0 0 8px #9ecaed;
        }
</style>

<div id="NewVirus">
    <Carousel Title="Exploit" Items="@carouselExploits()" />
    <br />
    <Carousel Title="Vector" Items="@carouselVectors()" SelectedItemChanged="@selectedVectorChanged" />
    <br />
    Distribution Channels
    <br />
    <br />
    @foreach (ViralDistributor distributor in ViralDistributor.List)
    {
        <div class="box @distributorClass(distributor)">
            @distributor.Name<br />

            @foreach (ViralVector vector in distributor.DistributedVectors)
            {
                <span class=@getDistributedVectorClass(vector)></span>
            }
        </div>
    }
    <br />
    <br />
    <button disabled=@disabled class="btn btn-outline-primary mdi mdi-timer"> Write @writeTime</button>
</div>

@code {
    private string writeTime => "30s";

    private bool disabled = true;

    private ViralVector selectedVector;

    private List<GameObjectBase> carouselExploits()
    {
        Console.WriteLine("Re-listing carousel exploits.");
        // return Exploit.List;
        var resultList = new List<GameObjectBase>();
        foreach (Exploit exploit in Exploit.List)
        {
            resultList.Add(exploit);
        }

        return resultList;
    }

    private List<GameObjectBase> carouselVectors()
    {
        var resultList = new List<GameObjectBase>();
        foreach (ViralVector vector in ViralVector.List)
        {
            resultList.Add(vector);
        }

        return resultList;
    }

    private string getDistributedVectorClass(ViralVector vector)
    {
        var isSelectedVector = (selectedVector != null && vector.Name == selectedVector.Name);
        return vector.Icon +
            (isSelectedVector ? "" : " locked");
    }

    private void selectedVectorChanged(GameObjectBase gameObject)
    {
        selectedVector = (ViralVector)gameObject;

        // if (selectedVector != null) Console.WriteLine("Selected Vector: " + selectedVector.Name);

        StateHasChanged();
    }

    private string distributorClass(ViralDistributor distributor)
    {
        if (selectedVector == null) return "";
        foreach (ViralVector vector in distributor.DistributedVectors)
        {
            if (vector.Name == selectedVector.Name)
            {
                return "purple";
            }
        }

        return "";
    }
}
