@inherits BadActorBaseComponent;

<style>
    .viralDistributor > span {
        margin-top: .75em;
    }
</style>

<div id="ViralDistributorsContainer" class="purple">
    <h4 class="@ViralDistributor.TypeIcon"> distributors</h4>

    @foreach (ViralDistributor distributor in ViralDistributor.List)
    {
        <div class="viralDistributor horizontalListItem">
            @distributor.Name<br />

            @foreach (ViralVector vector in distributor.DistributedVectors)
            {
                <span class=@getDistributedVectorClass(vector)></span>
            }

            <br />
            @if (distributor.Count == 0)
            {
                <span class="@purchaseClass(distributor)" @onclick="@distributor.Buy">
                    <span class="@coins.Icon"> @distributor.Cost</span>
                </span>
            }
            else
            {
                <ProgressBackground Color="rgb(150, 20, 180)" ProgressAmount="@ViralDistributor.MachineProgress">
                    <span class="@Machine.TypeIcon"></span>
                </ProgressBackground>
            }
        </div>
    }
</div>

@code {

    private Resource coins = Resource.Get("Coins");

    private string getCountLabel(ViralDistributor distributor)
    {
        return distributor.Count + "x";
    }

    private string getDistributedVectorClass(ViralVector vector)
    {
        return vector.Icon +
            (vector.Unlocked ? "" : " locked");
    }

    private string purchaseClass(ViralDistributor distributor)
    {
        return "mdi btn" +
            (coins.Value < distributor.Cost ? " locked" : "");
    }

    public void RedrawNeeded(Type filter)
    {
        if (filter != null && !(filter.Equals(typeof(ViralDistributor))
            || !(filter.Equals(typeof(ViralVector)))))
        {
            return;
        }

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        appState.RedrawNeeded += RedrawNeeded;
    }
}
