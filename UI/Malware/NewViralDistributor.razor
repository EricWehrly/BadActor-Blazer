<style>
    #NewViralDistribution .box {
        border: 1px dashed;
        border-color: var(--ba-border-color-light);
        display: inline-block;
        padding: 1em;
        transition: all ease-in-out .5s;
    }

        #NewViralDistribution .box.selected {
            box-shadow: 0 0 8px #9ecaed;
        }

    #NewViralDistribution input {
        background-color: transparent;
        color: inherit;
    }
</style>

<div id="NewViralDistribution">
    <Carousel Title="Type" Items="@carouselExploits()" SelectedItemChanged="@selectedExploitChanged" />

    <br />
    <br />
    <input type="text" @bind-value="@name" class="form-control" />
    <br />
    <button disabled="@canNotAfford()" @onclick="@buyDistributor" class="@writeButtonClass()"> @selectedType.Cost</button>
</div>

@code {

    [Inject]
    IModalService modalService { get; set; }

    private Resource coins = Resource.Get("Coins");
    private ViralDistributorType selectedType = ViralDistributorType.List[0];
    private string name = "Best Website";

    private string writeButtonClass() {
        return "purple btn btn-primary " + coins.Icon;
    }

    private List<GameObjectBase> carouselExploits()
    {
        var resultList = new List<GameObjectBase>();
        foreach (ViralDistributorType distributorType in ViralDistributorType.List)
        {
            resultList.Add(distributorType);
        }

        return resultList;
    }

    private void selectedExploitChanged(GameObjectBase gameObject)
    {
        selectedType = (ViralDistributorType)gameObject;

        StateHasChanged();
    }

    private bool canNotAfford()
    {
        return coins.Value < selectedType.Cost;
    }

    private void buyDistributor()
    {
        // TODO: Yeah, this logic probably doesn't go on the frontend
        // Factory, maybe?

        if (Resource.Pay(coins, selectedType.Cost))
        {
            new ViralDistributor(name, selectedType);

            modalService.Close(ModalResult.Cancel());
        }
    }
}