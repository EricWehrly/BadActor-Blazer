@inject AppState appState;

<style>
    #ObjectivesContainer h4 {
        text-decoration: dotted;
        text-decoration-line: underline;
    }

    .objective.fading {
        animation: fade 5000ms forwards;
    }
</style>

<div id="ObjectivesContainer">
    @foreach (Objective objective in Objective.List)
    {
        @if (shouldRenderObjective(objective))
        {
            <div class="@getObjectiveClass(objective)">
                <h4>@objective.Name</h4>
                @foreach (Objective.ObjectiveCriteria criteria in objective.CriteriaForObjective)
                {
                    <span class="@getObjectiveCriteriaClass(criteria)"> @getDescription(criteria)</span>
                    <br />
                }
            </div>
            <br />
        }
    }
</div>

@code {

    private List<Objective> objectivesToHide = new List<Objective>();

    private bool shouldRenderObjective(Objective objective)
    {
        if (objectivesToHide.Contains(objective)) return false;

        foreach(Objective prerequisite in objective.Prerequisites)
        {
            if (prerequisite.Complete == false) return false;
        }

        return true;
    }

    private string getObjectiveClass(Objective objective)
    {
        return "objective" +
            (objective.Complete ? " fading" : "");
    }

    private string getObjectiveCriteriaClass(Objective.ObjectiveCriteria criteria)
    {
        return criteria.Met ? "mdi mdi-checkbox-marked-outline" : "mdi mdi-checkbox-blank-outline";
    }

    private MarkupString getDescription(Objective.ObjectiveCriteria criteria)
    {
        return (MarkupString)criteria.Description;
    }

    // Can this be in a base component?
    public void RedrawNeeded(Type filter)
    {
        if (filter != null && !filter.Equals(typeof(Objective)))
        {
            return;
        }

        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        appState.RedrawNeeded += RedrawNeeded;

        appState.OnGameStateChanged += checkObjectivesToHide;
    }

    // this got weird in order to keep the domain of whether to show in the UI, but here we are
    private void checkObjectivesToHide()
    {
        foreach (Objective objective in Objective.List)
        {
            if (objective.Complete && !objectivesToHide.Contains(objective))
            {
                Task.Delay(5000).ContinueWith(t =>
                {
                    if (!objectivesToHide.Contains(objective))
                    {
                        objectivesToHide.Add(objective);
                        StateHasChanged();
                    }
                });
            }
        }
    }
}
