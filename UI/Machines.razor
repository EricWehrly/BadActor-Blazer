@inject AppState appState;

<style>
    #MachinesContainer {
        position: fixed;
        bottom: .5em;
        left: .5em;
    }

    #MachinesContainer h4 {
        text-decoration: dotted;
        text-decoration-line: underline;
    }

    .machine {
        border: 1px solid;
        border-color: var(--ba-border-color-light);
        display: inline-block;
        padding: 1.5em;

        transition: all ease-in-out .5s;
    }

    .machine.DropTarget {
        box-shadow: 0 0 10px #9ecaed;
    }
</style>

<div id="MachinesContainer">

    <h4>machines</h4>

    @foreach (Machine machine in Machine.List)
    {
        <div class="machine @machinesClass"
             @ondrop="@(e => HandleDrop(machine))" ondragover="event.preventDefault();">
            @foreach(Application application in machine.Applications)
            {
                <span class="mdi mdi-application"> @application.name</span>
            }
            <span class="mdi mdi-desktop-classic"> @machine.name</span>
        </div>
    }
</div>

@code {

    private string machinesClass => appState.ApplicationBeingDragged != null ? "DropTarget" : null;

    private async Task HandleDrop(Machine machine)
    {
        appState.ApplicationBeingDragged.RunOnMachine(machine);
        // this eventually shouldn't be bidirectional ...
        machine.RunApplication(appState.ApplicationBeingDragged);
    }

    protected override async Task OnInitializedAsync()
    {
        appState.OnApplicationDraggedChanged += StateHasChanged;
    }
}
